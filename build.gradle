plugins {
    id 'java'
    id 'com.google.protobuf' version '0.8.17'
}

group 'org.example'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.19.0'
    implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.19.0'

    // https://mvnrepository.com/artifact/io.grpc/grpc-all
    implementation group: 'io.grpc', name: 'grpc-all', version: '1.41.0'

    // https://mvnrepository.com/artifact/io.grpc/grpc-services
    implementation group: 'io.grpc', name: 'grpc-services', version: '1.41.0'

    // https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
}

test {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
            srcDirs 'src'
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.19.0'
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.41.0'
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

//task serverJar(type: Jar) {
//    manifest {
//        attributes 'Main-Class': 'org.example.sample.server.GreetingServer'
//    }
//    baseName = 'server'
//    duplicatesStrategy = 'include'
//    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
//    with jar
//}
//
//task clientJar(type: Jar) {
//    manifest {
//        attributes 'Main-Class': 'org.example.sample.client.GreetingClient'
//    }
//    duplicatesStrategy = 'include'
//    baseName = 'client'
//    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
//    with jar
//}

tasks.register('serverJar', Jar) {
//    archiveClassifier = 'uber'
    archiveBaseName = 'server'
    duplicatesStrategy = 'include'
    from sourceSets.main.output
    manifest {
        attributes 'Main-Class': 'org.example.sample.server.GreetingServer'
    }

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

tasks.register('clientJar', Jar) {
//    archiveClassifier = 'uber'
    archiveBaseName = 'client'
    duplicatesStrategy = 'include'
    from sourceSets.main.output
    manifest {
        attributes 'Main-Class': 'org.example.sample.client.GreetingClient'
    }

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}